!function(videojs,$){"use strict";var defaults={interval:10,accessurl:null,updateurl:null,disposeurl:null,playerID:null,startPosition:0},extend=Object.assign||function(){var args,target,i,object,property;args=Array.prototype.slice.call(arguments),target=args.shift()||{};for(i in args){object=args[i];for(property in object)object.hasOwnProperty(property)&&("object"==typeof object[property]?target[property]=extend(target[property],object[property]):target[property]=object[property])}return target},watchdog=null,makeRequest=function(url,data,cb){videojs.xhr({body:data?JSON.stringify(data):"{}",url:url,method:"POST",headers:{"Content-Type":"application/json"}},function(err,resp,body){cb(err?err.message||err:null,body?JSON.parse(body):null)})},makeWatchdog=function(options,player,ok){var playerToken,lasTime=options.startPosition||0,playerID=options.playerID,loadedmetadata=!1;player.on("loadedmetadata",function(){loadedmetadata=!0}),player.on("timeupdate",function(e){return loadedmetadata&&this.fistSent?void(lasTime=Math.round(player.currentTime()||0)):void(this.fistSent=!0)}),videojs.log("concurrence plugin: ok",ok);var cleanUp=function(){videojs.log("concurrenceview: DISPOSE",options),watchdog&&(player.clearInterval(watchdog),watchdog=!1,makeRequest(options.disposeurl,{player:playerID,position:lasTime,token:playerToken,status:"paused"},function(){}))};if(player.on("dispose",cleanUp),$(window).on("beforeunload",cleanUp),!watchdog){var wdf=function(){player.trigger({type:"avplayerupdate",playerID:playerID}),makeRequest(options.updateurl,{player:playerID,token:playerToken,position:lasTime,status:player.paused()?"paused":"playing"},function(error,ok){return error?(videojs.log("concurrenceview: update api error",error),void blockPlayer(player,"authapifail",{msg:error})):void(ok&&ok.success?(playerID=ok.player||playerID,playerToken=ok.token||playerToken):(videojs.log(new Error("Player Auth error"),ok),blockPlayer(player,"noauth",ok)))})};watchdog=player.setInterval(wdf,1e3*options.interval),wdf()}},blockPlayer=function(player,code,error,reason){code=code||"error",reason=reason||"Has alcanzado la cantidad maxima de players activos.",videojs.log("concurrenceview: stop player - ",reason),player.trigger({type:"avplayerbloked",code:code,reason:reason,error:error}),player.pause(),player.dispose()},canplay=function(options,player,cb){makeRequest(options.accessurl,{player:options.playerID},function(error,ok){return error?(videojs.log("concurrenceview: canplay api error",error),void cb(new Error(error),null)):void(ok&&ok.success?(cb(null,ok),player.trigger({type:"avplayercanplay",code:1})):cb(new Error("Player Auth error"),null))})},recoverStatus=function(info,player){info.position&&(player.currentTime=info.position,player.on("loadedmetadata",function(){this.currentTime=info.position}))},makeCheks=function(options,player){var voidf=function(){};return options.accessurl&&options.updateurl&&options.disposeurl?!options.interval||options.interval<5?(videojs.log("concurrenceview: invalid options",options),voidf):$?function(){canplay(options,player,function(error,ok){error?(videojs.log("concurrenceview: error",error),blockPlayer(player,"cantplay",error)):(recoverStatus(ok,player),makeWatchdog(options,player,ok))})}:(videojs.log("concurrenceview: invalid jquery",options),voidf):(videojs.log("concurrenceview: invalid urls",options),voidf)};videojs.plugin("concurrenceview",function(pluginoptions){var options=extend({},defaults,pluginoptions),player=this;videojs.log("concurrenceview plugin",options),player.ready(makeCheks(options,player),!1)})}(window.videojs,window.jQuery);